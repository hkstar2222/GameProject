// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
namespace DragonBones
{
		public class ArmatureData
		{
	
	      public string name;
		  public List<IAreaData> areaDataList = new List<IAreaData>();
		  public List<BoneData> boneDataList = new List<BoneData>();
		  public List<SkinData> skinDataList = new List<SkinData>();
		  public List<AnimationData> animationDataList = new List<AnimationData>();


		 //TODO check
		  static int sortBone( KeyValuePair<int, BoneData> a, KeyValuePair<int, BoneData> b)
		  {
			if(a.Key < b.Key)
			 return -1;
			else if(a.Key > b.Key)
				return 1;
		    return 0;
		  }

		  public ArmatureData ()
		  {
		  }

		IAreaData getAreaData(string areaName) 
		{
			if (areaDataList.Count <= 0)
			{
				return null;
			}
			
			if (areaName.Length <= 0 )
			{
				return areaDataList[0];
			}
			
			for (int i = 0; i < areaDataList.Count; ++i)
			{
				if (areaDataList[i].name == areaName)
				{
					return areaDataList[i];
				}
			}
			
			return null;
		}
		
		public BoneData getBoneData(string boneName) 
		{
			for (int i = 0; i < boneDataList.Count;  ++i)
			{
				if (boneDataList[i].name == boneName)
				{
					return boneDataList[i];
				}
			}

			return null;
		}
		
		public SkinData getSkinData(string skinName)
		{
			if (skinDataList.Count<=0)
			{
				return null;
			}
			
			if (skinName.Length <= 0 )
			{
				return skinDataList[0];
			}
			
			for (int i = 0; i < skinDataList.Count;  ++i)
			{
				if (skinDataList[i].name == skinName)
				{
					return skinDataList[i];
				}
			}
			
			return null;
		}
		
		public AnimationData getAnimationData(string animationName) 
		{
			for (int i = 0; i < animationDataList.Count;  ++i)
			{
				if (animationDataList[i].name == animationName)
				{
					return animationDataList[i];
				}
			}
			
			return null;
		}
		
		public void sortBoneDataList()
		{
			if (boneDataList.Count==0)
			{
				return;
			}
			
			List<KeyValuePair<int , BoneData>> sortedList = new List<KeyValuePair<int, BoneData>>();
			
			for (int i = 0; i < boneDataList.Count; ++i)
			{
				BoneData boneData = boneDataList[i];
				BoneData parentData = boneData;
				int level = 0;
				
				while (parentData!=null)
				{
					parentData = getBoneData(parentData.parent);
					level ++;
				}
				
				sortedList.Add(new KeyValuePair<int, BoneData>(level , boneData));
			}
			
			sortedList.Sort(sortBone);
			
			for (int i = 0; i < sortedList.Count; ++i)
			{
				boneDataList[i] = sortedList[i].Value;
			}
		}

		public void dispose()
		{
			for (int i = 0; i < areaDataList.Count; ++i)
			{
				areaDataList[i].dispose();
				//delete areaDataList[i];
			}
			
			for (int i = 0; i < boneDataList.Count; ++i)
			{
				boneDataList[i].dispose();
				//delete boneDataList[i];
			}
			
			for (int i = 0; i < skinDataList.Count; ++i)
			{
				skinDataList[i].dispose();
				//delete skinDataList[i];
			}
			
			for (int i = 0; i < animationDataList.Count; ++i)
			{
				animationDataList[i].dispose();
				//delete animationDataList[i];
			}
			
			areaDataList.Clear();
			boneDataList.Clear();
			skinDataList.Clear();
			animationDataList.Clear();
		}



		}
}

